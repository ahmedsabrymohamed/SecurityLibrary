using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DESAES
{
    class Program
    {
        static Dictionary<char, string > hexBase;

        static string[,] MIX ={
                                 {"00000010","00000011","00000001","00000001"},
                                 {"00000001","00000010","00000011","00000001"},
                                 {"00000001","00000001","00000010","00000011"},
                                 {"00000011","00000001","00000001","00000010"}};
        static string[,] MIX_INV ={
                                 {"00001110","00001011","00001101","00001001"},
                                 {"00001001","00001110","00001011","00001101"},
                                 {"00001101","00001001","00001110","00001011"},
                                 {"00001011","00001101","00001001","00001110"}};
       static string [,] S_BOX={
        {"63","7c","77","7b","f2","6b","6f","c5","30","01","67","2b","fe","d7","ab","76"},
 	    {"ca","82","c9","7d","fa","59","47","f0","ad","d4","a2","af","9c","a4","72","c0"},
 	    {"b7","fd","93","26","36","3f","f7","cc","34","a5","e5","f1","71","d8","31","15"},
 	    {"04","c7","23","c3","18","96","05","9a","07","12","80","e2","eb","27","b2","75"},
 	    {"09","83","2c","1a","1b","6e","5a","a0","52","3b","d6","b3","29","e3","2f","84"},
 	    {"53","d1","00","ed","20","fc","b1","5b","6a","cb","be","39","4a","4c","58","cf"},
 	    {"d0","ef","aa","fb","43","4d","33","85","45","f9","02","7f","50","3c","9f","a8"},
 	    {"51","a3","40","8f","92","9d","38","f5","bc","b6","da","21","10","ff","f3","d2"},
 	    {"cd","0c","13","ec","5f","97","44","17","c4","a7","7e","3d","64","5d","19","73"},
 	    {"60","81","4f","dc","22","2a","90","88","46","ee","b8","14","de","5e","0b","db"},
 	    {"e0","32","3a","0a","49","06","24","5c","c2","d3","ac","62","91","95","e4","79"},
 	    {"e7","c8","37","6d","8d","d5","4e","a9","6c","56","f4","ea","65","7a","ae","08"},
 	    {"ba","78","25","2e","1c","a6","b4","c6","e8","dd","74","1f","4b","bd","8b","8a"},
 	    {"70","3e","b5","66","48","03","f6","0e","61","35","57","b9","86","c1","1d","9e"},
 	    {"e1","f8","98","11","69","d9","8e","94","9b","1e","87","e9","ce","55","28","df"},
 	    {"8c","a1","89","0d","bf","e6","42","68","41","99","2d","0f","b0","54","bb","16"}};
       static string[,] S_BOX_INVERS ={
        {"52","09","6A","D5","30","36","A5","38","BF","40","A3","9E","81","F3","D7","FB"},
        {"7C","E3","39","82","9B","2F","FF","87","34","8E","43","44","C4","DE","E9","CB"},
        {"54","7B","94","32","A6","C2","23","3D","EE","4C","95","0B","42","FA","C3","4E"},
        {"08","2E","A1","66","28","D9","24","B2","76","5B","A2","49","6D","8B","D1","25"},
        {"72","F8","F6","64","86","68","98","16","D4","A4","5C","CC","5D","65","B6","92"},
        {"6C","70","48","50","FD","ED","B9","DA","5E","15","46","57","A7","8D","9D","84"},
        {"90","D8","AB","00","8C","BC","D3","0A","F7","E4","58","05","B8","B3","45","06"},
        {"D0","2C","1E","8F","CA","3F","0F","02","C1","AF","BD","03","01","13","8A","6B"},
        {"3A","91","11","41","4F","67","DC","EA","97","F2","CF","CE","F0","B4","E6","73"},
        {"96","AC","74","22","E7","AD","35","85","E2","F9","37","E8","1C","75","DF","6E"},
        {"47","F1","1A","71","1D","29","C5","89","6F","B7","62","0E","AA","18","BE","1B"},
        {"FC","56","3E","4B","C6","D2","79","20","9A","DB","C0","FE","78","CD","5A","F4"},
        {"1F","DD","A8","33","88","07","C7","31","B1","12","10","59","27","80","EC","5F"},
        {"60","51","7F","A9","19","B5","4A","0D","2D","E5","7A","9F","93","C9","9C","EF"},
        {"A0","E0","3B","4D","AE","2A","F5","B0","C8","EB","BB","3C","83","53","99","61"},
        {"17","2B","04","7E","BA","77","D6","26","E1","69","14","63","55","21","0C","7D"}};
    
        static void Main(string[] args)
        {
            initialize_Dictionary();
            string mainPlain = "0x3243F6A8885A308D313198A2e0370734";
            string mainCipher = "0x3925841D02DC09FBDC118597196A0B32";
            string mainKey = "0x2B7E151628AED2A6ABF7158809CF4F3C";
            string f= Encrypt(mainPlain, mainKey);
            System.Console.WriteLine(f.Equals(mainCipher.ToUpper()));
            Console.ReadKey();
            
        }
        
       

        public static string Encrypt(string plainText, string key)
        {
            string[,] kXorPt = addRoundKey(plainText,key);
            for(int i=0;i<9;i++)
            {
                string[,] stateMatrix=substituteRound(kXorPt,S_BOX);
            }
                throw new NotImplementedException();
        }
        private static string[,] substituteRound(string[,] kXorPt,string[,] subsMatrix)
        {
            
            string[,] res = new string[4, 4];
             for (int i = 0; i < 4; i++)
                 for (int j = 0; j < 4; j++)
                 {
                     res[i, j] = subsMatrix[Convert.ToInt32("" + kXorPt[i, j][0], 16), Convert.ToInt32("" + kXorPt[i, j][1], 16)];
                 }
             return res;
        }

        private static string[,] mixColumns(string[,] stateMatrix, string[,] constMatrix)
        {
            string[,] res = new string[4, 4];
            string element="";
            for (int i = 0; i < 4;i++ )
                for (int j = 0; j < 4; j++)
                {

                    for (int k = 0; k < 4; k++)
                    {
                        element=xor(hexToBin (constMatrix[j,k]),hexToBin (constMatrix[j,k]));
                    }
                    res[i,j]
                }
            return res;
        }
        private static string[,] addRoundKey(string plainText, string key)
        {
            string[,] pt = new string[4, 4];
            string[,] k = new string[4, 4];
            string[,] kXorPt = new string[4, 4];
            plainText = plainText.Substring(2);
            key = key.Substring(2);
            ////////////////////////////Add Round Key////////////////////////
            int counter = 0;
            for (int i = 0; i < 4; i++)
                for (int j = 0; j < 4; j++)
                {
                    string ptElement = plainText.Substring(counter, 2);
                    string kElement = key.Substring(counter, 2);
                    pt[j, i] = ptElement;
                    k[j, i] = kElement;
                    kXorPt[j, i] = xor(kElement, ptElement);
                    // System.Console.WriteLine();
                    counter += 2;
                }
            return kXorPt;
            ///////////////////////////////////////////////////////////////////
        }
        private static string xor(string p1, string p2)
        {
            return (Convert.ToInt32(p1, 16) ^ Convert.ToInt32(p2, 16)).ToString("X");
        }
        private static string hexToBin(string hex)
        {

            initialize_Dictionary();
            string bin = "";
            hex = hex.Substring(2).ToUpper();
            int size = hex.Length;
            string res;
            foreach (char x in hex)
            {
                hexBase.TryGetValue(x, out res);
                bin +=  res;
            }
            return bin;
        }

        private static void addRoundKey()
        {

        }
        private static void initialize_Dictionary()
        {
            hexBase = new Dictionary<char, string >();
            hexBase.Add('0',"0000");
            hexBase.Add('1',"0001");
            hexBase.Add('2',"0010");
            hexBase.Add('3',"0011");
            hexBase.Add('4',"0100");
            hexBase.Add('5',"0101");
            hexBase.Add('6',"0110");
            hexBase.Add('7',"0111");
            hexBase.Add('8',"1000");
            hexBase.Add('9',"1001");
            hexBase.Add('A',"1010");
            hexBase.Add('B',"1011");
            hexBase.Add('C',"1100");
            hexBase.Add('D',"1101");
            hexBase.Add('E',"1110");
            hexBase.Add('F',"1111");
        }
    }
}
